{"version":3,"sources":["components/Header.js","components/TextInput.js","components/TextResult.js","components/Kata1.js","components/Kata2.js","components/Kata3.js","components/Kata4.js","components/Kata5.js","components/Kata6.js","components/Kata7.js","components/Kata8.js","components/CodeViewer.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","href","TextInput","props","onChange","ev","value","target","onChangeText","id","name","rows","placeholder","TextResult","defaultValue","CasingStrings","useState","text","setText","split","map","word","charAt","toUpperCase","slice","join","resultTranslate","Pangram","alphabet","letters","toLowerCase","filter","character","includes","letrasVistas","Object","values","isAPangram","MiddleCharacter","length","half","Math","floor","getMiddle","CamelCase","result","replace","toCamelCase","AlphabetPosition","letter","indexOf","getAlphabetPosition","Vocals","a","e","AE","BreakStrings","counter","previous","push","HashtagGenerator","generateHashtag","CodeViewer","view","setView","onClick","src","image","width","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8aA4DeA,G,kBAzDA,WACb,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,aACA,wBAAIA,UAAU,aACZ,wBAAIA,UAAU,mBACZ,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,WAIF,4BACE,uBAAGC,KAAK,SAASD,UAAU,OAA3B,gB,OClCGE,G,YAbG,SAACC,GAMjB,OACE,yBAAKH,UAAU,aACb,8BAAUA,UAAU,sBAAsBI,SAPvB,SAACC,GACtB,IAAMC,EAAQD,EAAGE,OAAOD,MACxBH,EAAMK,aAAaF,IAKmDG,GAAG,OAAOC,KAAK,OAAOC,KAAK,IAAIC,YAAY,0BCAtGC,G,MARI,SAACV,GAClB,OACE,yBAAKH,UAAU,aACb,8BAAUA,UAAU,sBAAsBS,GAAG,OAAOC,KAAK,OAAOC,KAAK,IAAIG,aAAcX,EAAMG,MAAOM,YAAY,qBC2BvGG,EA3BO,WAAO,IAAD,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,KAc1B,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,kDAEV,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAWQ,aAjBE,SAACF,GAClBY,EAAQZ,MAiBJ,kBAAC,EAAD,CAAYA,MAdM,SAACW,GACvB,OAAOA,EACJE,MAAM,KACNC,KAAI,SAACC,GAAD,OAAUA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACxDC,KAAK,KAUeC,CAAgBT,Q,OC6B5BU,G,MAlDC,WAAO,IAAD,EACEX,mBAAS,IADX,mBACfC,EADe,KACTC,EADS,KAkCpB,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,2BAEV,uBAAGA,UAAU,eAAb,sBACqB,0BAAMA,UAAU,qBAAhB,kDADrB,yBAGA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAWQ,aAxCE,SAACF,GAClBY,EAAQZ,MAwCJ,kBAAC,EAAD,CAAYA,MArCC,SAACW,GAClB,IAD2B,EACvBW,EAAW,6BAEXC,EAAUZ,EACXa,cACAX,MAAM,IACNY,QAAO,SAACC,GAAD,OAAeJ,EAASK,SAASD,MAEvCE,EAAe,GARQ,cAUNN,GAVM,IAU3B,2BAA+B,CAC7BM,EAD6B,SACN,GAXE,kDAcNL,GAdM,IAc3B,2BAA8B,CAC5BK,EAD4B,UACJ,GAfC,8BAkB3B,cAAoBC,OAAOC,OAAOF,GAAlC,eAAiD,CAC/C,GAAc,IADA,KAEZ,OAAO,EAIX,OAAO,EAagBG,CAAWpB,SCVvBqB,G,MAlCS,WAAO,IAAD,EACNtB,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,KAoB5B,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,kCAA+E,KAEzF,uBAAGA,UAAU,eAAb,8EACA,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CAAWQ,aAxBE,SAACF,GAClBY,EAAQZ,MAwBJ,kBAAC,EAAD,CAAYA,MArBA,SAACW,GACjB,IAAIsB,EAAStB,EAAKsB,OAClB,GAAe,IAAXA,EACF,OAAOtB,EACF,GAAIsB,EAAS,IAAM,EAAG,CAC3B,IAAIC,EAAOD,EAAS,EACpB,OAAOtB,EAAKK,OAAOkB,EAAO,GAAKvB,EAAKK,OAAOkB,GAE3C,IAAIA,EAAOC,KAAKC,MAAMH,EAAS,GAC/B,OAAOtB,EAAKK,OAAOkB,GAYEG,CAAU1B,SCQtB2B,G,MApCG,WAAO,IAAD,EACA5B,mBAAS,IADT,mBACjBC,EADiB,KACXC,EADW,KAsBtB,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,eAEV,uBAAGA,UAAU,eAAb,yDACA,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAWQ,aA1BE,SAACF,GAClBY,EAAQZ,MA0BJ,kBAAC,EAAD,CAAYA,MAvBE,SAACW,GACnB,GAAoB,IAAhBA,EAAKsB,OACP,MAAO,GAGT,IAAIM,EAAS5B,EACVa,cACAgB,QAAQ,QAAS,KACjB3B,MAAM,KACNC,KAAI,SAACC,GAAD,OAAUA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACxDC,KAAK,IAER,OAAOR,EAAKK,OAAO,GAAKuB,EAAOrB,MAAM,GAWduB,CAAY9B,SCCxB+B,G,MA/BU,WAAO,IAAD,EACPhC,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,KAiB7B,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,yEAEV,uBAAGA,UAAU,eAAb,kGACA,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAWQ,aArBE,SAACF,GAClBY,EAAQZ,MAqBJ,kBAAC,EAAD,CAAYA,MAlBU,SAACW,GAC3B,IAAIW,EAAW,6BACf,OAAOX,EACJa,cACAX,MAAM,IACNY,QAAO,SAACC,GAAD,OAAeJ,EAASK,SAASD,MACxCZ,KAAI,SAAC6B,GAAD,OAAYrB,EAASsB,QAAQD,GAAU,KAC3CxB,KAAK,KAWe0B,CAAoBlC,SCkBhCmC,G,MA3CA,WAAO,IAAD,EACGpC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,KA6BnB,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,wDAEV,uBAAGA,UAAU,eAAb,gEACA,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAWQ,aAjCE,SAACF,GAClBY,EAAQZ,MAiCJ,kBAAC,EAAD,CAAYA,MA9BP,SAACW,GACV,IADmB,EACfY,EAAUZ,EAAKa,cAAcX,MAAM,IAEnCkC,EAAI,EACJC,EAAI,EAJW,cAMEzB,GANF,IAMnB,2BAA8B,CAAC,IAApBoB,EAAmB,QACb,MAAXA,IACFI,GAAK,GAGQ,MAAXJ,IACFK,GAAK,IAZU,8BAgBnB,OAAU,IAAND,GAAiB,IAANC,GAGRD,IAAMC,EAWUC,CAAGtC,SCMfuC,G,MA3CM,WAAO,IAAD,EACHxC,mBAAS,IADN,mBACpBC,EADoB,KACdC,EADc,KA6BzB,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,mDAEV,uBAAGA,UAAU,eAAb,4FACA,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAWQ,aAjCE,SAACF,GAClBY,EAAQZ,MAiCJ,kBAAC,EAAD,CAAYA,MA9BH,SAACW,GACd,IAAIY,EAAUZ,EAAKE,MAAM,IACrB0B,EAAS,GACTY,EAAU,EACVC,EAAW,GAEX7B,EAAQU,OAAS,IAAM,GACzBV,EAAQ8B,KAAK,KAPQ,oBAUF9B,GAVE,IAUvB,2BAA8B,CAAC,IAApBoB,EAAmB,QACZ,IAAZQ,GACFC,EAAWT,EACXQ,KACqB,IAAZA,IACTZ,EAAOc,KAAKD,EAAWT,GACvBQ,EAAU,IAhBS,8BAmBvB,OAAOZ,EAWgBA,CAAO5B,SCDnB2C,G,MApCU,WAAO,IAAD,EACP5C,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,KAsB7B,OACE,yBAAKlB,UAAU,SACb,wBAAIA,UAAU,eAAeS,GAAG,SAAhC,WACU,0BAAMT,UAAU,0BAAhB,yBAEV,uBAAGA,UAAU,eAAb,yGACA,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CAAWQ,aA1BE,SAACF,GAClBY,EAAQZ,MA0BJ,kBAAC,EAAD,CAAYA,MAvBM,SAACW,GACvB,IAAIY,EAAUZ,EACXE,MAAM,KACNC,KAAI,SAACC,GAAD,OAAUA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACxDC,KAAK,IAER,MAAgB,KAAZI,EACKA,IACEA,EAAQU,QAAU,MAGpB,IAAMV,EAYQgC,CAAgB5C,SCV5B6C,G,MAtBI,SAAC3D,GAAW,IAAD,EACNa,oBAAS,GADH,mBACvB+C,EADuB,KACjBC,EADiB,KAY5B,OACE,6BACE,4BAAQhE,UAAU,WAAWiE,QAXb,WAGhBD,GADW,IAATD,KASF,oBAGA,yBAAK/D,UAAW+D,EAAO,QAAU,OAAQG,IAAK/D,EAAMgE,MAAOC,MAAM,MAAMC,IAAI,mBCmBlEC,EA3BH,WACV,OACE,yBAAKtE,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,kBACd,wBAAIA,UAAU,yBAAd,kCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYmE,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,uBAClB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYA,MAAM,0BCtBNI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff9684c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../stylesheets/Header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className='header'>\r\n      <nav className='header__nav'>\r\n        <h2 className='nav__title'>Índice</h2>\r\n        <ul className='nav__list'>\r\n          <li className='nav__list--item'>\r\n            <a href='#kata1' className='url'>\r\n              Kata 1\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata2' className='url'>\r\n              Kata 2\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata3' className='url'>\r\n              Kata 3\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata4' className='url'>\r\n              Kata 4\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata5' className='url'>\r\n              Kata 5\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata6' className='url'>\r\n              Kata 6\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata7' className='url'>\r\n              Kata 7\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata8' className='url'>\r\n              Kata 8\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href='#kata9' className='url'>\r\n              Kata 9\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport '../stylesheets/TextInput.scss';\r\n\r\nconst TextInput = (props) => {\r\n  const handleOnChange = (ev) => {\r\n    const value = ev.target.value;\r\n    props.onChangeText(value);\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <textarea className='container__textarea' onChange={handleOnChange} id='text' name='text' rows='8' placeholder='Introduce el texto'></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport '../stylesheets/TextResult.scss';\r\n\r\nconst TextResult = (props) => {\r\n  return (\r\n    <div className='container'>\r\n      <textarea className='container__textarea' id='text' name='text' rows='8' defaultValue={props.value} placeholder='Traducción'></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextResult;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata1.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst CasingStrings = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const resultTranslate = (text) => {\r\n    return text\r\n      .split(' ')\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  };\r\n\r\n  return (\r\n    <div className='kata1'>\r\n      <h2 className='kata1__title' id='kata1'>\r\n        Kata 1. <span className='kata1__title--subtitle'>Capitalizar la primera letra de cada palabra </span>\r\n      </h2>\r\n      <div className='kata1__casingStrings'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={resultTranslate(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CasingStrings;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata2.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst Pangram = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const isAPangram = (text) => {\r\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\r\n\r\n    let letters = text\r\n      .toLowerCase()\r\n      .split('')\r\n      .filter((character) => alphabet.includes(character));\r\n\r\n    let letrasVistas = {};\r\n\r\n    for (const letter of alphabet) {\r\n      letrasVistas[letter] = 0;\r\n    }\r\n\r\n    for (const letter of letters) {\r\n      letrasVistas[letter] += 1;\r\n    }\r\n\r\n    for (const count of Object.values(letrasVistas)) {\r\n      if (count === 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <div className='kata2'>\r\n      <h2 className='kata2__title' id='kata2'>\r\n        Kata 2. <span className='kata2__title--subtitle'> Detectando pangramas!</span>\r\n      </h2>\r\n      <p className='kata2__text'>\r\n        Introduce la frase <span className='kata2__text--bold'>\"The quick brown fox jumps over the lazy dog\" </span> y mira el resultado:\r\n      </p>\r\n      <div className='kata2__pangram'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={isAPangram(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pangram;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata3.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst MiddleCharacter = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const getMiddle = (text) => {\r\n    let length = text.length;\r\n    if (length === 1) {\r\n      return text;\r\n    } else if (length % 2 === 0) {\r\n      let half = length / 2;\r\n      return text.charAt(half - 1) + text.charAt(half);\r\n    } else {\r\n      let half = Math.floor(length / 2);\r\n      return text.charAt(half);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='kata3'>\r\n      <h2 className='kata3__title' id='kata3'>\r\n        Kata 3. <span className='kata3__title--subtitle'> Retornando la letra del medio</span>{' '}\r\n      </h2>\r\n      <p className='kata3__text'>Si la palabra es par devolverá una letra, si es impar devolverá dos:</p>\r\n      <div className='kata3__middleCharacter'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={getMiddle(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MiddleCharacter;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata4.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst CamelCase = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const toCamelCase = (text) => {\r\n    if (text.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let result = text\r\n      .toLowerCase()\r\n      .replace(/-|_/gi, ' ')\r\n      .split(' ')\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join('');\r\n\r\n    return text.charAt(0) + result.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div className='kata4'>\r\n      <h2 className='kata4__title' id='kata4'>\r\n        Kata 4. <span className='kata4__title--subtitle'> CamelCase</span>\r\n      </h2>\r\n      <p className='kata4__text'>Escribe una frase para ver el resultado de camelCase:</p>\r\n      <div className='kata4__camelCase'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={toCamelCase(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CamelCase;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata5.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst AlphabetPosition = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const getAlphabetPosition = (text) => {\r\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz';\r\n    return text\r\n      .toLowerCase()\r\n      .split('')\r\n      .filter((character) => alphabet.includes(character))\r\n      .map((letter) => alphabet.indexOf(letter) + 1)\r\n      .join(' ');\r\n  };\r\n\r\n  return (\r\n    <div className='kata5'>\r\n      <h2 className='kata5__title' id='kata5'>\r\n        Kata 5. <span className='kata5__title--subtitle'> Reemplazar las letras por la posición que ocupan en el alfabeto </span>\r\n      </h2>\r\n      <p className='kata5__text'>Cada letra se reemplaza por el número de posición que ocupan actualmente en el alfabeto:</p>\r\n      <div className='kata5__alphabetPosition'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={getAlphabetPosition(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlphabetPosition;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata6.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst Vocals = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const AE = (text) => {\r\n    let letters = text.toLowerCase().split('');\r\n\r\n    let a = 0;\r\n    let e = 0;\r\n\r\n    for (const letter of letters) {\r\n      if (letter === 'a') {\r\n        a += 1;\r\n      }\r\n\r\n      if (letter === 'e') {\r\n        e += 1;\r\n      }\r\n    }\r\n\r\n    if (a === 0 && e === 0) {\r\n      return true;\r\n    }\r\n    return a === e;\r\n  };\r\n\r\n  return (\r\n    <div className='kata6'>\r\n      <h2 className='kata6__title' id='kata6'>\r\n        Kata 6. <span className='kata6__title--subtitle'>Verificar si hay el mismo número de \"a\" y de \"e\"</span>\r\n      </h2>\r\n      <p className='kata6__text'>El método retornará true o false dependiendo del caso.</p>\r\n      <div className='kata6__vocals'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={AE(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Vocals;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata7.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst BreakStrings = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const result = (text) => {\r\n    let letters = text.split('');\r\n    let result = [];\r\n    let counter = 0;\r\n    let previous = '';\r\n\r\n    if (letters.length % 2 === 1) {\r\n      letters.push('_');\r\n    }\r\n\r\n    for (const letter of letters) {\r\n      if (counter === 0) {\r\n        previous = letter;\r\n        counter++;\r\n      } else if (counter === 1) {\r\n        result.push(previous + letter);\r\n        counter = 0;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div className='kata7'>\r\n      <h2 className='kata7__title' id='kata7'>\r\n        Kata 7. <span className='kata7__title--subtitle'> Divide palabras en pares de dos carácteres</span>\r\n      </h2>\r\n      <p className='kata7__text'>Divide una palabra en grupos de 2 carácteres. En caso de ser impar se añade un \"_\"</p>\r\n      <div className='kata7__splitText'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={result(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BreakStrings;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/Kata8.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst HashtagGenerator = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const generateHashtag = (text) => {\r\n    var letters = text\r\n      .split(' ')\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join('');\r\n\r\n    if (letters === '') {\r\n      return letters;\r\n    } else if (letters.length >= 140) {\r\n      return false;\r\n    } else {\r\n      return '#' + letters;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='kata8'>\r\n      <h2 className='kata8__title' id='kata8'>\r\n        Kata 8. <span className='kata8__title--subtitle'>Generador de Hashtag</span>\r\n      </h2>\r\n      <p className='kata8__text'>Genera un Hashtag, capitaliza todas las palabras y retorna false si se superan los 140 carácteres.</p>\r\n      <div className='kata8__generateHashtag'>\r\n        <TextInput onChangeText={changeText} />\r\n        <TextResult value={generateHashtag(text)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HashtagGenerator;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/CodeViewer.scss';\r\n\r\nconst CodeViewer = (props) => {\r\n  let [view, setView] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    // setView(!view);\r\n    if (view === true) {\r\n      setView(false);\r\n    } else {\r\n      setView(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className='btn-code' onClick={handleClick}>\r\n        Ver el código\r\n      </button>\r\n      <img className={view ? 'block' : 'none'} src={props.image} width='800' alt='source code'></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeViewer;\r\n","import React from 'react';\nimport '../stylesheets/App.scss';\nimport Header from './Header';\nimport Kata1 from './Kata1';\nimport Kata2 from './Kata2';\nimport Kata3 from './Kata3';\nimport Kata4 from './Kata4';\nimport Kata5 from './Kata5';\nimport Kata6 from './Kata6';\nimport Kata7 from './Kata7';\nimport Kata8 from './Kata8';\nimport CodeViewer from './CodeViewer';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Header />\n      <main className='App__container'>\n        <h1 className='App__container--title'>Resultado de katas de Codewars</h1>\n        <Kata1 />\n        <CodeViewer image='./images/kata1.png' />\n        <Kata2 />\n        <CodeViewer image='./images/kata2.png' />\n        <Kata3 />\n        <CodeViewer image='./images/kata3.png' />\n        <Kata4 />\n        <CodeViewer image='./images/kata4.png' />\n        <Kata5 />\n        <CodeViewer image='./images/kata5.png' />\n        <Kata6 />\n        <CodeViewer image='./images/kata6.png' />\n        <Kata7 />\n        <CodeViewer image='./images/kata7.png' />\n        <Kata8 />\n        <CodeViewer image='./images/kata8.png' />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}