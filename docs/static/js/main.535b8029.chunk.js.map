{"version":3,"sources":["components/TextInput.js","components/TextResult.js","components/Kata1.js","components/App.js","serviceWorker.js","index.js"],"names":["TextInput","props","className","htmlFor","onChange","ev","value","target","onChangeText","id","name","rows","TextResult","defaultValue","CasingStrings","useState","text","setText","split","map","word","charAt","toUpperCase","slice","join","resultTranslate","App","Kata1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAmBeA,G,YAhBG,SAACC,GAMjB,OACE,yBAAKC,UAAU,aACb,2BAAOA,UAAU,mBAAmBC,QAAQ,QAA5C,2BAGA,8BAAUD,UAAU,sBAAsBE,SAVvB,SAACC,GACtB,IAAMC,EAAQD,EAAGE,OAAOD,MACxBL,EAAMO,aAAaF,IAQmDG,GAAG,OAAOC,KAAK,OAAOC,KAAK,SCAtFC,G,MAXI,SAACX,GAClB,OACE,yBAAKC,UAAU,aACb,2BAAOA,UAAU,mBAAmBC,QAAQ,QAA5C,mBAGA,8BAAUD,UAAU,sBAAsBO,GAAG,OAAOC,KAAK,OAAOC,KAAK,IAAIE,aAAcZ,EAAMK,WCmBpFQ,EAtBO,WAAO,IAAD,EACJC,mBAAS,IADL,mBACrBC,EADqB,KACfC,EADe,KAc1B,OACE,yBAAKf,UAAU,iBACb,kBAAC,EAAD,CAAWM,aAbI,SAACF,GAClBW,EAAQX,MAaN,kBAAC,EAAD,CAAYA,MAVQ,SAACU,GACvB,OAAOA,EACJE,MAAM,KACNC,KAAI,SAACC,GAAD,OAAUA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,MACxDC,KAAK,KAMaC,CAAgBT,OCX1BU,EARH,WACV,OACE,yBAAKxB,UAAU,OACb,kBAACyB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.535b8029.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../stylesheets/TextInput.scss';\r\n\r\nconst TextInput = (props) => {\r\n  const handleOnChange = (ev) => {\r\n    const value = ev.target.value;\r\n    props.onChangeText(value);\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <label className='container__title' htmlFor='text'>\r\n        Escribe aqui tu texto :\r\n      </label>\r\n      <textarea className='container__textarea' onChange={handleOnChange} id='text' name='text' rows='8'></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react';\r\nimport '../stylesheets/TextResult.scss';\r\n\r\nconst TextResult = (props) => {\r\n  return (\r\n    <div className='container'>\r\n      <label className='container__title' htmlFor='text'>\r\n        Traducci√≥n :\r\n      </label>\r\n      <textarea className='container__textarea' id='text' name='text' rows='8' defaultValue={props.value}></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextResult;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport '../stylesheets/CasingStrings.scss';\r\nimport TextInput from './TextInput';\r\nimport TextResult from './TextResult';\r\n\r\nconst CasingStrings = () => {\r\n  let [text, setText] = useState('');\r\n\r\n  const changeText = (value) => {\r\n    setText(value);\r\n  };\r\n\r\n  const resultTranslate = (text) => {\r\n    return text\r\n      .split(' ')\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(' ');\r\n  };\r\n\r\n  return (\r\n    <div className='CasingStrings'>\r\n      <TextInput onChangeText={changeText} />\r\n      <TextResult value={resultTranslate(text)} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CasingStrings;\r\n","import React from 'react';\nimport '../stylesheets/App.scss';\nimport Kata1 from './Kata1';\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Kata1 />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}